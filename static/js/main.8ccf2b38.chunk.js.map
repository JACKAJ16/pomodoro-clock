{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","breakLength","sessionLength","isStarted","time","do","start","handleClickReset","bind","handleClickBreakIncrement","handleClickBreakDecrement","handleClickSessionIncrement","handleClickSessionDecrement","handleClickStart","clock","this","setState","timerID","setInterval","tick","clearInterval","document","getElementById","pause","currentTime","play","minutes","Math","floor","seconds","id","className","onClick","src","preload","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8ccf2b38.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      breakLength: 5,\n      sessionLength: 25,\n      isStarted: false,\n      time: 1500,\n      do: \"Session\",\n      start: \"start\"\n    }\n    this.handleClickReset = this.handleClickReset.bind(this);\n    this.handleClickBreakIncrement = this.handleClickBreakIncrement.bind(this);\n    this.handleClickBreakDecrement = this.handleClickBreakDecrement.bind(this);\n    this.handleClickSessionIncrement = this.handleClickSessionIncrement.bind(this);\n    this.handleClickSessionDecrement = this.handleClickSessionDecrement.bind(this);\n    this.handleClickStart = this.handleClickStart.bind(this);\n    this.clock = this.clock.bind(this);\n\n  }\n  \n  handleClickBreakIncrement() {\n    if (this.state.breakLength === 60) {\n      this.setState ({\n      breakLength: 60\n    })\n    } else {\n    this.setState (state => ({\n      breakLength: state.breakLength + 1\n    }))\n    }\n  }\n  \n  handleClickBreakDecrement() {\n    if(this.state.breakLength === 1) {\n      this.setState ({\n      breakLength: 1\n    })\n    } else {\n    this.setState (state => ({\n      breakLength: state.breakLength - 1\n    }))\n    }\n  }\n  \n  handleClickSessionIncrement() {\n    if(this.state.sessionLength === 60) {\n      this.setState({\n        sessionLength: 60\n      })\n    } else {\n    this.setState (state => ({\n      sessionLength: state.sessionLength + 1,\n      time: state.time + 60\n\n    }))\n    }\n  }\n  \n  \n  \n  handleClickSessionDecrement() {\n    if(this.state.sessionLength === 1) {\n      this.setState ({\n      sessionLength: 1\n    })\n    } else {\n      this.setState (state => ({\n      sessionLength: state.sessionLength - 1,\n      time: state.time - 60\n    }))\n    }\n  }\n\n  handleClickStart() {\n    if(this.state.isStarted === false) {\n    this.timerID = setInterval(() => this.tick(), 1000);\n      this.setState({\n        isStarted: true,\n        start: \"pause\"\n      })\n    } else {\n        clearInterval(this.timerID)\n      this.setState({\n        isStarted: false,\n        start: \"start\"\n      })\n     }\n  }\n handleClickReset() {\n   if(this.state.isStarted === true) {\n   clearInterval(this.timerID)\n   document.getElementById(\"beep\").pause();\n   document.getElementById(\"beep\").currentTime = 0;  \n     this.setState ({\n      breakLength: 5,\n      sessionLength: 25,\n      time: 1500,\n      do: \"Session\",\n      isStarted: false,\n      start: \"start\"\n    })\n   } else {\n   document.getElementById(\"beep\").pause();\n   document.getElementById(\"beep\").currentTime = 0;\n\n   \n    this.setState ({\n      breakLength: 5,\n      sessionLength: 25,\n      time: 1500,\n      do: \"Session\",\n      isStarted: false\n    })\n   }\n }\n  \n  tick() {\n    if(this.state.time === 0 && this.state.do ===\"Session\") {\n      document.getElementById(\"beep\").play()\n      this.setState(state =>({\n        time: state.breakLength * 60,\n        do: \"Break\"\n       }))\n    } else if(this.state.time === 0 && this.state.do ===\"Break\") {\n      document.getElementById(\"beep\").play()\n      this.setState(state => ({\n      time: state.sessionLength * 60,\n      do: \"Session\"\n      }))\n    }else if(this.state.time !== 0) {\n     this.setState (state => ({\n      time: state.time - 1\n        \n    }))     \n  }}\n  \n  clock() {\n    let minutes = Math.floor(this.state.time / 60);\n    let seconds = this.state.time - minutes * 60;\n    seconds = seconds < 10 ? '0' + seconds : seconds;\n    minutes = minutes < 10 ? '0' + minutes : minutes;\n    return minutes + ':' + seconds;\n  }\n  \n  \n  render() {\n    return(\n      <div>\n        <div id=\"main\">\n          <div id=\"header\">\n            <h1>\n              Pomodoro Clock\n            </h1>\n          </div>\n          <div id=\"break-label\">Break Length</div>\n          <div id=\"session-label\">Session Length</div>\n          <div id=\"button-div\">\n            <button id=\"break-decrement\" className=\"button\" onClick={this.handleClickBreakDecrement}>-</button>\n            <div id=\"break-length\">{this.state.breakLength}</div>\n            <button id=\"break-increment\" className=\"button\"  onClick={this.handleClickBreakIncrement}>+</button>\n          </div>\n          <div id=\"button-div\">\n            <button id=\"session-decrement\" className=\"button\"  onClick={this.handleClickSessionDecrement}>-</button>\n            <div id=\"session-length\">{this.state.sessionLength}</div>\n            <button id=\"session-increment\" className=\"button\"  onClick={this.handleClickSessionIncrement}>+</button>\n          </div>\n          <div id=\"timer-div\">\n            <h2 id=\"timer-label\">{this.state.do}</h2>\n            <div id=\"time-left\">{this.clock()}</div>\n          </div>\n          <div id=\"buttons\">\n            <button id=\"start_stop\" className=\"button button-big\" onClick={this.handleClickStart}>{this.state.start}</button>\n            <button id=\"reset\" className=\"button button-big\" onClick={this.handleClickReset}>reset</button>\n            <audio src=\"https://goo.gl/65cBl1\" id=\"beep\" preload=\"auto\"> </audio>\n          </div> \n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}